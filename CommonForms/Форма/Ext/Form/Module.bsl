
&НаКлиенте
Процедура СчитатьШтрихкод(Команда)
	#Если МобильноеПриложениеКлиент  Тогда
		
		ОбработчикСканирования = Новый ОписаниеОповещения("ОбработкаСканирования", ЭтаФорма);
		
		ОбработчикЗакрытия = Новый ОписаниеОповещения("ОбработкаЗакрытияИнтерфейса", ЭтаФорма);
		
		СредстваМультимедиа.ПоказатьСканированиеШтрихКодов("Наведите камеру на штрихкод", ОбработчикСканирования, ОбработчикЗакрытия, ТипШтрихКода.Линейный);
		
	#КонецЕсли
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	 #Если МобильноеПриложениеКлиент  Тогда

            Если НЕ СредстваМультимедиа.ПоддерживаетсяСканированиеШтрихКодов() Тогда

                        Сообщить("Сканирование штрихкодов не поддерживается");

            КонецЕсли;

     #КонецЕсли   
 КонецПроцедуры
 
 &НаКлиенте
 Процедура ОбработкаСканирования(Штрихкод, Результат, Сообщение, ДополнительныеПараметры) Экспорт
	 
	 Если Результат Тогда
		 СредстваМультимедиа.ЗакрытьСканированиеШтрихКодов();
		 //
		 //Ошибка = ЕстьОшибкаВвода(Штрихкод);
		 //
		 //Если Ошибка <> ЛОЖЬ Тогда
		 //    
		 //    Сообщение = "Ошибка штрих кода";
		 //    
		 //Иначе
			 //Сообщить(Штрихкод);
			 Штрихкод="0"+Штрихкод;
			 ИнфОДоговоре=ОбработатьШтрихКод(Штрихкод);
			 Номер=ИнфОДоговоре.Номер;
			 Дата=ИнфОДоговоре.Дата;
			 СуммаДоговора=ИнфОДоговоре.СуммаДоговора;
			  СогласованиеДоговора.Очистить();
			  Товары.Очистить();
			 Для Каждого Строка Из ИнфОДоговоре.МассивСогласующих Цикл 
				 НоваястрокаТЗ = СогласованиеДоговора.Добавить();
				 ЗаполнитьЗначенияСвойств(НоваяСтрокаТЗ, Строка); 
			 КонецЦикла;

			 
			 
		 //    Сообщение = ТекущаяОперация;
		 //    
		 //КонецЕсли;
		 
	 Иначе
		 
		 Сообщение = "Ошибка обработки штрих кода";  
		 
	 КонецЕсли; 
	 
 КонецПроцедуры
 
 &НаКлиенте
Процедура ОбработкаЗакрытияИнтерфейса(ДополнительныеПараметры) Экспорт

            СредстваМультимедиа.ЗакрытьСканированиеШтрихКодов();

КонецПроцедуры
		
Функция ОбработатьШтрихкод(Штрихкод)

	 Соединение = WSСсылки.ПолучитьИнформациюОДоговоре.СоздатьWSПрокси("VBC","ValidateBarCode","ValidateBarCodeSoap");
	 Соединение.Пароль="111";
	 Соединение.Пользователь="Администратор4";
	 Операция = Соединение.ТочкаПодключения.Интерфейс.Операции.Получить("CheckBarсode"); 
	 СериализованнаяСтруктураДанных = Сериализовать(Штрихкод);
	 Ответ = Соединение.CheckBarcode(СериализованнаяСтруктураДанных);
	 ИнформацияОДоговоре=Десериализовать(Ответ);
	 Возврат ИнформацияОДоговоре;
	
 КонецФункции 
 
 Функция Десериализовать(XMLСтруктураСериализованногоОбъекта) 
	ЧтениеXMLДанных = Новый ЧтениеXML;
	ЧтениеXMLДанных.УстановитьСтроку(XMLСтруктураСериализованногоОбъекта);
	ТЗ = СериализаторXDTO.ПрочитатьXML(ЧтениеXMLДанных);
	ЧтениеXMLДанных.Закрыть();
	Возврат ТЗ;
КонецФункции

 
Функция Сериализовать(ОбъектСериализации)
	ДеревоВОбъектеXDTO = СериализаторXDTO.ЗаписатьXDTO(ОбъектСериализации);
	МойXML = Новый ЗаписьXML; МойXML.УстановитьСтроку();
	ФабрикаXDTO.ЗаписатьXML(МойXML, ДеревоВОбъектеXDTO);
	Возврат МойXML.Закрыть();
КонецФункции


&НаКлиенте
Процедура ТестовоеСоединениеСВебСервисом(Команда)
	 Штрихкод="0000000000031";
	 ИнформацияОДоговоре=ТестовоеСоединениеСВебСервисомСервер(Штрихкод);
	 ОтветСервера=ИнформацияОДоговоре;
 КонецПроцедуры
 
Функция ТестовоеСоединениеСВебСервисомСервер(Штрихкод)
	 Соединение = WSСсылки.ПолучитьИнформациюОДоговоре.СоздатьWSПрокси("VBC","ValidateBarCode","ValidateBarCodeSoap");
	 Соединение.Пароль="111";
	 Соединение.Пользователь="Администратор4";
	 Операция = Соединение.ТочкаПодключения.Интерфейс.Операции.Получить("CheckBarсode"); 
	 СериализованнаяСтруктураДанных = Сериализовать(Штрихкод);
	 Ответ = Соединение.CheckBarcode(СериализованнаяСтруктураДанных);
	 //Сообщить(Ответ);
	 ИнформацияОДоговоре=Десериализовать(Ответ);
	 Возврат ИнформацияОДоговоре;
 КонецФункции
 
 
 //EAN >
Функция СформироватьСтрокуEanGnivc(ШтрихкодСтрокойСимволов)
    Попытка
        Тест = Число(ШтрихкодСтрокойСимволов);
    Исключение
        ВызватьИсключение "Штрихкод может содержать только цифры";
    КонецПопытки;

    СимволыСпособовКодирования = "#$%&'()*+,";
    ЛевыйЗащитныйШаблон = "!";
    СреднийЗащитныйШаблон = "-";
    ПравыйЗащитныйШаблон = "!";

    СимволыШрифтаПоТипамКодов = Новый Соответствие;
    СимволыШрифтаПоТипамКодов.Вставить("L", "0123456789");
    СимволыШрифтаПоТипамКодов.Вставить("G", "ABCDEFGHIJ");
    СимволыШрифтаПоТипамКодов.Вставить("R", "abcdefghij");

    СпособыКодированияЛевойЧасти = Новый Массив;
    СпособыКодированияЛевойЧасти.Добавить("LLLLLL");
    СпособыКодированияЛевойЧасти.Добавить("LLGLGG");
    СпособыКодированияЛевойЧасти.Добавить("LLGGLG");
    СпособыКодированияЛевойЧасти.Добавить("LLGGGL");
    СпособыКодированияЛевойЧасти.Добавить("LGLLGG");
    СпособыКодированияЛевойЧасти.Добавить("LGGLLG");
    СпособыКодированияЛевойЧасти.Добавить("LGGGLL");
    СпособыКодированияЛевойЧасти.Добавить("LGLGLG");
    СпособыКодированияЛевойЧасти.Добавить("LGLGGL");
    СпособыКодированияЛевойЧасти.Добавить("LGGLGL");

    СпособКодированияПравойЧасти = "RRRRRR";

    Если СтрДлина(ШтрихкодСтрокойСимволов) = 13 Тогда
        КоличествоСимволовВГруппе = 6;
    ИначеЕсли СтрДлина(ШтрихкодСтрокойСимволов) = 8 Тогда
        КоличествоСимволовВГруппе = 4;
        СимволыСпособовКодирования = "";
        ШтрихкодСтрокойСимволов = "0"+ШтрихкодСтрокойСимволов;
    Иначе
        ВызватьИсключение "Поддерживаются только штрихкоды длиной 13 и 8 символов";
    КонецЕсли;

    ИндексСпособаКодирования = Число(Лев(ШтрихкодСтрокойСимволов,1));

    ЛеваяЧастьКода = "";
    ПраваяЧастьКода = "";

    Для ИндексСимвола = 1 По КоличествоСимволовВГруппе Цикл
        ЛеваяЧастьКода = ЛеваяЧастьКода
            + Сред(СимволыШрифтаПоТипамКодов[Сред(СпособыКодированияЛевойЧасти[ИндексСпособаКодирования],ИндексСимвола,1)]
                    ,Число(Сред(ШтрихкодСтрокойСимволов,(ИндексСимвола+1),1))+1
                    ,1);
        ПраваяЧастьКода = ПраваяЧастьКода
            + Сред(СимволыШрифтаПоТипамКодов[Сред(СпособКодированияПравойЧасти,ИндексСимвола,1)]
                    ,Число(Сред(ШтрихкодСтрокойСимволов,(ИндексСимвола+КоличествоСимволовВГруппе+1),1))+1
                    ,1);
    КонецЦикла;

    Результат = ""  + Сред(СимволыСпособовКодирования,ИндексСпособаКодирования+1,1)
                    + ЛевыйЗащитныйШаблон
                    + ЛеваяЧастьКода
                    + СреднийЗащитныйШаблон
                    + ПраваяЧастьКода
                    + ПравыйЗащитныйШаблон;
    Возврат Результат;
КонецФункции

Процедура ЗапросОтчетаНаСервере()
	 Соединение = WSСсылки.ПолучитьОтчет.СоздатьWSПрокси("GR","GenerateReps","GenerateRepsSoap");
	 Соединение.Пароль="111";
	 Соединение.Пользователь="Администратор4";
	 Операция = Соединение.ТочкаПодключения.Интерфейс.Операции.Получить("CreateReport"); 
	 //СериализованнаяСтруктураДанных = Сериализовать(ТекущаяДата());
	 //Сообщить(СериализованнаяСтруктураДанных);
	 Ответ = Соединение.CreateReport();
	 ИнформацияОДоговоре=Десериализовать(Ответ);
	 ТабДок=ИнформацияОДоговоре;
КонецПроцедуры


&НаКлиенте
Процедура ЗапросОтчета(Команда)
	ЗапросОтчетаНаСервере();
КонецПроцедуры

